{
  "info": {
    "name": "Docker-Go Backend API",
    "_postman_id": "docker-go-backend-collection",
    "description": "Автотесты для основных эндпоинтов backend",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{ \"email\": \"test1@example.com\", \"password\": \"123456\", \"username\": \"testuser1\" }"
            },
            "url": { "raw": "http://localhost:4000/api/auth/register", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["api", "auth", "register"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 201\", function () { pm.response.to.have.status(201); });",
                  "pm.test(\"Response has id\", function () { var json = pm.response.json(); pm.expect(json).to.have.property('id'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{ \"email\": \"test1@example.com\", \"password\": \"123456\" }"
            },
            "url": { "raw": "http://localhost:4000/api/auth/login", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["api", "auth", "login"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Response has token\", function () { var json = pm.response.json(); pm.expect(json).to.have.property('token'); });",
                  "if (pm.response.code === 200) { pm.collectionVariables.set('token', pm.response.json().token); }"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Projects",
      "item": [
        {
          "name": "Get All Projects",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": { "raw": "http://localhost:4000/api/projects", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["api", "projects"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Response is array\", function () { pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Project",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"name\": \"Test Project\", \"description\": \"desc\" }"
            },
            "url": { "raw": "http://localhost:4000/api/projects", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["api", "projects"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 201\", function () { pm.response.to.have.status(201); });",
                  "pm.test(\"Response has id\", function () { var json = pm.response.json(); pm.expect(json).to.have.property('id'); });",
                  "if (pm.response.code === 201) { pm.collectionVariables.set('projectId', pm.response.json().id); }"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Files",
      "item": [
        {
          "name": "Get Files",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": { "raw": "http://localhost:4000/api/projects/{{projectId}}/files", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["api", "projects", "{{projectId}}", "files"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Response is array\", function () { pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Create File",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"name\": \"Dockerfile\", \"content\": \"FROM node\", \"position\": 0 }"
            },
            "url": { "raw": "http://localhost:4000/api/projects/{{projectId}}/files", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["api", "projects", "{{projectId}}", "files"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 201\", function () { pm.response.to.have.status(201); });",
                  "pm.test(\"Response has id\", function () { var json = pm.response.json(); pm.expect(json).to.have.property('id'); });",
                  "if (pm.response.code === 201) { pm.collectionVariables.set('fileId', pm.response.json().id); }"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Project Members",
      "item": [
        {
            "name": "Register User 2",
            "request": {
                "method": "POST",
                "header": [{ "key": "Content-Type", "value": "application/json" }],
                "body": {
                "mode": "raw",
                "raw": "{ \"email\": \"test2@example.com\", \"password\": \"123456\", \"username\": \"testuser2\" }"
                },
                "url": {
                "raw": "http://localhost:4000/api/auth/register",
                "protocol": "http",
                "host": ["localhost"],
                "port": "4000",
                "path": ["api", "auth", "register"]
                }
            },
            "event": [
                {
                "listen": "test",
                "script": {
                    "exec": [
                    "pm.test(\"Status 201\", function () { pm.response.to.have.status(201); });",
                    "pm.test(\"Response has id\", function () { var json = pm.response.json(); pm.expect(json).to.have.property('id'); });",
                    "if (pm.response.code === 201) { pm.collectionVariables.set('user2Id', pm.response.json().id); }"
                    ]
                }
                }
            ]
            },
        {
          "name": "Get Project Members",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": { "raw": "http://localhost:4000/api/projects/{{projectId}}/members", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["api", "projects", "{{projectId}}", "members"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Response is array\", function () { pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
                    {
            "name": "Add Project Member",
            "request": {
                "method": "POST",
                "header": [
                { "key": "Authorization", "value": "Bearer {{token}}" },
                { "key": "Content-Type", "value": "application/json" }
                ],
                "body": {
                "mode": "raw",
                "raw": "{ \"userId\": \"{{user2Id}}\", \"role\": \"editor\" }"
                },
                "url": {
                "raw": "http://localhost:4000/api/projects/{{projectId}}/members",
                "protocol": "http",
                "host": ["localhost"],
                "port": "4000",
                "path": ["api", "projects", "{{projectId}}", "members"]
                }
            },
            "event": [
                {
                "listen": "test",
                "script": {
                    "exec": [
                    "pm.test(\"Status 201\", function () { pm.response.to.have.status(201); });",
                    "pm.test(\"Response has id\", function () { var json = pm.response.json(); pm.expect(json).to.have.property('id'); });"
                    ]
                }
                }
            ]
            }
      ]
    },
    {
      "name": "Lint Dockerfile",
      "item": [
        {
          "name": "Lint Dockerfile",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"content\": \"FROM node:18\\nRUN npm install\\nCMD [\\\"node\\\", \\\"index.js\\\"]\" }"
            },
            "url": { "raw": "http://localhost:4000/api/lint", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["api", "lint"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Response is text\", function () { pm.response.to.be.withBody; });"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": []
}